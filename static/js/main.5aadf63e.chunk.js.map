{"version":3,"sources":["YoungUserList.js","Page.js","App.js","serviceWorker.js","index.js"],"names":["fetchJSON","url","fetch","then","resp","json","catch","capitalizeFirstLetter","string","toUpperCase","slice","YoungUserList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","users","loading","baseurl","fetchDetails","id","concat","addUserDetails","details","validUserDetails","reduce","acc","detail","phoneNum","parsePhoneNumberFromString","number","isPossible","push","assign","phonenum","name","sort","a","b","age","setState","fetchToken","token","promiseIds","result","map","Promise","all","_this$props","classes","numYoungest","_this$state","youngUserDetails","react_default","createElement","Grid_default","container","spacing","item","xs","className","Fragment","index","Card_default","card","key","cardGrid","sm","CardMedia_default","component","alt","cardMedia","image","photo","title","CardContent_default","cardDetails","Typography_default","variant","color","paragraph","bio","React","Component","withStyles","theme","inline","display","flex","maxWidth","margin","marginBottom","Page","layout","Paper_default","paper","align","src_YoungUserList","appBar","position","defineProperty","width","marginLeft","unit","marginRight","breakpoints","up","marginTop","padding","App","src_Page","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5aadf63e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { parsePhoneNumberFromString } from 'libphonenumber-js';\nimport withStyles from '@material-ui/core/styles/withStyles';\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nimport './Loader.css';\n\n\nconst styles = theme => ({\n  inline: {\n    display: 'inline',\n  },\n  cardMedia: {\n    flex: 1,\n    maxWidth: 300,\n    margin: '0 auto',\n  },\n  card: {\n    display: 'flex',\n    marginBottom: 10,\n  },\n  cardDetails: {\n    flex: 3,\n  },\n});\n\nconst fetchJSON = (url) => {\n  return fetch(url)\n    .then(resp => resp.json())\n    .catch(() => null);\n}\n\nconst capitalizeFirstLetter = (string) => {\n  return string[0].toUpperCase() + string.slice(1);\n}\n\nclass YoungUserList extends React.Component {\n\n  state = {\n    users: [],\n    loading: true,\n  }\n  baseurl = 'https://appsheettest1.azurewebsites.net/sample/';\n\n  constructor(props) {\n    super(props);\n\n    this.fetchToken('');\n  }\n\n  fetchDetails = (id) => {\n    return fetchJSON(this.baseurl + `detail/${id}`);\n  }\n\n  addUserDetails = (details) => {\n    // Validate and format the user details\n    const validUserDetails = details.reduce((acc, detail) => {\n      if (!detail) return acc;\n\n      const phoneNum = parsePhoneNumberFromString(detail.number, 'US');\n      if (!phoneNum) return acc;\n\n      // Note: probably isValid() should be used for a \"real\" application\n      if (!phoneNum.isPossible()) return acc;\n      acc.push(Object.assign({}, detail, {\n        phonenum: phoneNum.number, // normalize phone number to E.164 format\n        name: capitalizeFirstLetter(detail.name),\n      }));\n      return acc;\n    }, []);\n\n    const users = this.state.users.concat(validUserDetails);\n    users.sort((a, b) => a.age - b.age);\n\n    this.setState({users});\n  }\n\n  fetchToken = (token) => {\n    fetchJSON(this.baseurl + `list?token=${token}`).then((resp) => {\n\n      // Fetch details in bulk so that we only update state once per list page\n      const promiseIds = resp.result.map((id) => this.fetchDetails(id));\n      Promise.all(promiseIds)\n        .then(this.addUserDetails)\n        .then(() => {\n          if (!resp.token) { // set loading to false after details loaded\n            this.setState({loading: false});\n          }\n        });\n\n      if (resp.token) {\n        this.fetchToken(resp.token);\n      }\n    });\n  }\n\n  render() {\n    const { classes, numYoungest } = this.props;\n    const { users, loading } = this.state;\n    const youngUserDetails = users.slice(0, numYoungest);\n\n    if (loading) {\n      return (\n        <Grid container spacing={40}>\n          <Grid item xs={12}>\n            <div className=\"loader\">\n              <div></div><div></div><div></div><div></div>\n            </div>\n          </Grid>\n        </Grid>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        {youngUserDetails.map((detail, index) => {\n          return (\n            <Card className={classes.card} key={index}>\n              <Grid container spacing={40} className={classes.cardGrid}>\n                <Grid item xs={12} sm={4}>\n                    <CardMedia\n                      component=\"img\"\n                      alt=\"User Profile Picture\"\n                      className={classes.cardMedia}\n                      image={detail.photo}\n                      title=\"User Profile Picture\"\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={8}>\n                    <CardContent className={classes.cardDetails}>\n                      <Typography component=\"h2\" variant=\"h5\">\n                        {detail.name}\n                      </Typography>\n                      <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                        {`Age: ${detail.age} Phone number: ${detail.phonenum}`}\n                      </Typography>\n                      <Typography variant=\"subtitle1\" paragraph>\n                        {detail.bio}\n                      </Typography>\n                    </CardContent>\n                  </Grid>\n              </Grid>\n            </Card>\n          )}\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nYoungUserList.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(YoungUserList);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport YoungUserList from './YoungUserList';\n\nconst styles = theme => ({\n  appBar: {\n    position: 'relative',\n  },\n  layout: {\n    width: 'auto',\n    marginLeft: theme.spacing.unit * 2,\n    marginRight: theme.spacing.unit * 2,\n    [theme.breakpoints.up(600 + theme.spacing.unit * 2 * 2)]: {\n      width: 600,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  },\n  paper: {\n    marginTop: theme.spacing.unit * 3,\n    marginBottom: theme.spacing.unit * 3,\n    padding: theme.spacing.unit * 2,\n    [theme.breakpoints.up(600 + theme.spacing.unit * 3 * 2)]: {\n      marginTop: theme.spacing.unit * 6,\n      marginBottom: theme.spacing.unit * 6,\n      padding: theme.spacing.unit * 3,\n    },\n  },\n  title: {\n    marginBottom: 10,\n  },\n});\n\nclass Page extends React.Component {\n  render() {\n    const { classes } = this.props;\n    const numYoungest = 5;\n\n    return (\n      <React.Fragment>\n        <main className={classes.layout}>\n          <Paper className={classes.paper}>\n            <Typography component=\"h1\" variant=\"h4\" align=\"center\" className={classes.title}>\n              Youngest {numYoungest} Users\n            </Typography>\n            <YoungUserList numYoungest={numYoungest} />\n          </Paper>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nPage.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Page);","import React, { Component } from 'react';\nimport Page from './Page';\n\nclass App extends Component {\n  render() {\n    return <Page />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}